{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesse\\\\Documents\\\\Frontend opleiding\\\\Code\\\\React\\\\inventory-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport TodoItem from \"./components/Product\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Inventory = () => {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [inputValue, setInputValue] = useState({\n    id: \"\",\n    value: \"\"\n  });\n  const [counter, setCounter] = useState(0);\n\n  const handleClick1 = () => {\n    setCounter(counter + 1);\n  };\n\n  const handleClick2 = () => {\n    setCounter(counter - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"product-input\",\n      value: inputValue.value,\n      onChange: e => setInputValue({\n        value: e.target.value,\n        id: inputValue.id\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (inputValue.id) {\n          const NewProducts = products.map(product => {\n            if (product.id === inputValue.id) {\n              return {\n                id: product.id,\n                value: inputValue.value\n              };\n            }\n\n            return product;\n          });\n          setInputValue({\n            id: \"\",\n            value: \"\"\n          });\n          return setProducts(NewProducts);\n        }\n\n        const id = nanoid();\n        const myProducts = [...products, {\n          id: id,\n          value: inputValue.value\n        }];\n        setInputValue({\n          id: \"\",\n          value: \"\"\n        });\n        setProducts(myProducts);\n      },\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: products.map(product => {\n        return /*#__PURE__*/_jsxDEV(TodoItem, {\n          product: product,\n          setProducts: setProducts,\n          products: products,\n          setInputValue: setInputValue\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), counter, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick1,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick2,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Inventory, \"nxeOOTEqp+r2ClOzsvBWZVW2IqI=\");\n\n_c = Inventory;\nexport default Inventory;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"sources":["C:/Users/jesse/Documents/Frontend opleiding/Code/React/inventory-app/src/App.js"],"names":["React","useState","nanoid","TodoItem","Inventory","products","setProducts","inputValue","setInputValue","id","value","counter","setCounter","handleClick1","handleClick2","e","target","NewProducts","map","product","myProducts"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport TodoItem from \"./components/Product\";\n\nconst Inventory = () => {\n  const [products, setProducts] = useState([]);\n  const [inputValue, setInputValue] = useState({ id: \"\", value: \"\" });\n  const [counter, setCounter] = useState(0);\n\n  const handleClick1 = () => {\n    setCounter(counter + 1);\n  };\n  const handleClick2 = () => {\n    setCounter(counter - 1);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"product-input\"\n        value={inputValue.value}\n        onChange={(e) =>\n          setInputValue({ value: e.target.value, id: inputValue.id })\n        }\n      />\n      <button\n        onClick={() => {\n          if (inputValue.id) {\n            const NewProducts = products.map((product) => {\n              if (product.id === inputValue.id) {\n                return { id: product.id, value: inputValue.value };\n              }\n              return product;\n            });\n            setInputValue({ id: \"\", value: \"\" });\n            return setProducts(NewProducts);\n          }\n          const id = nanoid();\n          const myProducts = [...products, { id: id, value: inputValue.value }];\n          setInputValue({ id: \"\", value: \"\" });\n          setProducts(myProducts);\n        }}\n      >\n        Add\n      </button>\n      <ul>\n        {products.map((product) => {\n          return (\n            <TodoItem\n              key={product.id}\n              product={product}\n              setProducts={setProducts}\n              products={products}\n              setInputValue={setInputValue}\n            />\n          );\n        })}\n      </ul>\n\n      {counter}\n\n      <div className=\"buttons\">\n        <button onClick={handleClick1}>+</button>\n        <button onClick={handleClick2}>-</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Inventory;\n"]},"metadata":{},"sourceType":"module"}